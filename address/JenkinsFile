pipeline {
    agent any
	
	parameters {
		booleanParam (
		  defaultValue: false,
		  description: 'Upload this version to repository?',
		  name : 'UPLOAD_TO_REPOSITORY')
		booleanParam (
		  defaultValue: false,
		  description: 'Target Deploy to Openshift?',
		  name : 'DEPLOY_TO_OCP')
		booleanParam (
		  defaultValue: false,
		  description: 'Target Deploy to Kubernetes?',
		  name : 'DEPLOY_TO_K8S')
	}
	
	environment {
        DISABLE_AUTH = 'false'
        WORKSPACE = pwd()
        KUBECONFIG = pwd() + "/.kubeconfig"
        OC_USER = credentials('OC_USER')
        
        // Install the pipeline-utility-steps plugin to read information from pom.xml into env variables.
        // If optional file path left empty the step will try to read pom.xml in the current working directory
        IMAGE_NAME = readMavenPom().getArtifactId()    // set as servicerequestSvc in pom.xml
        VERSION = readMavenPom().getVersion()
    }  
  
    options {
    	timeout(time: 20, unit: 'MINUTES') 
    }
    
    stages {
        
        stage('Fetch Source') {
           steps {
	        echo 'Fetching code from Git repository'
	        
	        git 'https://github.com/labamol/demos.git'
	       }
        }
        
        
        stage('Build with Maven') {
            steps {
                echo 'Running build automation in workspace:' ${WORKSPACE}
				
				sh """
	            set +x	            
	            mvn build-helper:parse-version versions:set -DnewVersion=\\\${parsedVersion.majorVersion}.\\\${parsedVersion.minorVersion}.\\\${parsedVersion.incrementalVersion}-BUILD-\${BUILD_NUMBER} versions:commit
	            mvn clean install                
                """
                                
                archiveArtifacts artifacts: '**/target/*.jar'
                
                if (params.DEPLOY_TO_OCP) {
                	cp ${WORKSPACE}//target/*.jar ${WORKSPACE}//target/s2i-build/deployments/
                }

                
            }
        }
        
        
		stage('Deploy to repository') {
			when {
				expression {
					return params.UPLOAD_TO_REPOSITORY
				}
			}
			  steps {
				echo 'Updating artifact version with jenkins build number before uploading to repository...'
				sh 'mvn build-helper:parse-version versions:set -DnewVersion=\\\${parsedVersion.majorVersion}.\\\${parsedVersion.minorVersion}.\\\${parsedVersion.incrementalVersion}-BUILD-${BUILD_NUMBER} versions:commit'
				
				echo 'Deploying to respository..when deployed will show at the info endpoint the last commit information and the build number from Jenkins.'
				sh 'mvn -DskipTests clean deploy'
				
				echo 'Tagging with version in SCM '
				sh 'mvn -Dusername="jenkins" scm:tag'
			  }
		}
		
		
		stage('Quality Analysis') {
            environment {
                SONAR = credentials('sonar') 
            }
            parallel {     
                stage ("Integration Test") {
                    steps {
                        echo 'Run integration tests here...'
                    }
                }
                stage("Sonar Scan") {
                    steps {
                        sh "mvn sonar:sonar -Dsonar.login=$SONAR_PSW"
                    }
                }
            }
        }
        
        
        stage('Build and Publish Image') {
            when {
                branch 'master'    
            }
            steps {
                sh """
                docker build -t ${IMAGE_NAME} .
                docker tag ${IMAGE_NAME} ${IMAGE_NAME}:${VERSION}
                docker push ${IMAGE_NAME}:${VERSION}
                """
            }
        }
        
		
		stage('Push Docker Image to Docker Hub') {
            when {
                branch 'master'
            }
            steps {
                script {
                    docker.withRegistry('https://registry.hub.docker.com', 'docker_hub_login') {
                        app.push("${env.BUILD_NUMBER}")
                        app.push("latest")
                    }
                }
            }
        }
        
        
        stage('DeployToK8sDev') {
            when {
                branch 'master'
            }
            steps {
                input 'Deploy to K8s Dev?'
                
                milestone(1)
                
                // Install Kubernetes Continuous Deploy Plugin to Jenkins
                kubernetesDeploy(
                    kubeconfigId: 'kubeconfig',
                    configs: 'servicerequestSvc-deployment.yml',
                    enableConfigSubstitution: true
                )    
            }
        }
        
        
        stage('Create OCP Image Builder') {
	    	steps {
		    	script {
		        	openshift.withCluster() {
		          		openshift.withProject() {
	          		    	if (!openshift.selector("bc", "servicerequestSvc").exists()) {
		          				
		          				openshift.newBuild("--name=servicerequestSvc", "--image-stream=redhat-openjdk18-openshift:1.1", "--binary")          		
		          			}
						}
					}
		        }
			}
		}
		
		
		stage('OCP Build Image') {
		      steps {
		        	script {
			          	openshift.withCluster() {
			            	openshift.selector("bc", "servicerequestSvc").startBuild("--from-file=target/servicerequestSvc-spring.jar", "--wait=true")
			          	}
		      		}
		      }
    	}
    
    	
    	stage('Promote for OCP-DEV') {
      		steps {
        		script {
          			openshift.withCluster() {
            			openshift.tag("servicerequestSvc:latest", "servicerequestSvc:dev")
          			}
        		}
      		}
    	}
    
    	
    	stage('Deploy to OCP-DEV') {
		    steps {
		        script {
		            openshift.withCluster(){
		            	openshift.withProject() {
	          		    	if (!openshift.selector("dc", "servicerequestSvc-dev").exists()) {
		          				
		          				openshift.newApp("servicerequestSvc:dev", "--name=servicerequestSvc-dev").narrow('svc').expose()          		
		          			}
						}
					}    
		        }
		    }
    	}
    
    
		stage('Promote for OCP-STAGE') {
      		steps {
        		script {
          			openshift.withCluster() {
            			openshift.tag("servicerequestSvc:dev", "servicerequestSvc:stage")
          			}
        		}
      		}
    	}    
    
    
    
    	stage('Deploy to OCP-STAGE') {
		    steps {
		        script {
		            openshift.withCluster(){
		            	openshift.withProject() {
	          		    	if (!openshift.selector("dc", "servicerequestSvc-stage").exists()) {
		          				
		          				openshift.newApp("servicerequestSvc:stage", "--name=servicerequestSvc-stage").narrow('svc').expose()          		
		          			}
						}
					}    
		        }
		    }
    	}
    
       
        
       
    }
    
    post {
        always {
            echo 'Finished'
        }
        success {
            echo 'Success'
        }
        unstable {
            echo 'Unstable'
        }
        failure {
            echo 'Failed'
        }
        changed {
            echo 'Changed'
        }
    }
}
